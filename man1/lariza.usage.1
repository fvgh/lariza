.TH lariza 1 "2015-11-28" "lariza" "User Commands"
.\" --------------------------------------------------------------------
.SH NAME
lariza.usage \- extended usage hints
.\" --------------------------------------------------------------------
.SH DESCRIPTION
\fBlariza\fP is a simple web browser using GTK+ 3, GLib and WebKit2GTK+.
This manpage contains additional hints and pointers regarding its usage.
.\" --------------------------------------------------------------------
.SH "INPUT DRIVER"
\fBlariza\fP hardly evaluates any user input. Instead, user input is fed
through a user-supplied script called \(lqthe input driver\(rq. Its file
name is \fBlariza\-input\-driver\fP and it must be located somewhere in
your $\fBPATH\fP.
.P
An exemplary implementation is provided by \fBlariza\fP, but the point
of this script is to allow for user customization. In other words, it's
your job to extend or rewrite the default implementation.
.P
The browser automatically launches the input driver script when needed.
Pipes are established between the browser and the script. The browser
will first send some variables to the script's \fBstdin\fP. This is done
by sending a line containing the name of the variable, followed by
another line which contains the variable's value. Valid variable names:
.TP
\fBcontext\fP
The most important one. It indicates the type of event that the input
driver is supposed to handle. See below for a list of all values.
.TP
\fBcontext_specific_text\fP
The meaning of this string depends on the context it's being used in.
Only present for some contexts, see below.
.TP
\fBcurrent_uri\fP
The URI currently shown in the WebKit viewport associated with this
event. Not present if the event originated from the download manager
window.
.TP
\fBhover_uri\fP
If the mouse cursor is currently hovering over some hyperlink, this
variable will be set to that link.
.TP
\fBkey\fP
A key as pressed by the user. This is one of the symbols defined in
\fIgdk/gdkkeysyms.h\fP, minus the leading \fBGDK_KEY_\fP part. If
modifier keys have been pressed as well, there will be an additional
\fBC\-\fP (indicating Control), an \fBM\-\fP (indicating Mod1) and/or an
\fBS\-\fP (indicating Super), in that order. For example, if the user
pressed \fBControl + Mod1 + x\fP, the script would receive \fBC-M-x\fP.
.P
Currently supported context strings:
.TP
\fBinputbox\fP
The user has entered some text into the input box and now your script
must be decide what to do with it. This is the point where you usually
implement features like keyword based searching.
\fIcontext_specific_text\fP will be set to the text of the input box.
.TP
\fBhandle_context_menu_uri\fP
The user has issued a right-click on some link or some media file and he
has then selected the item \(lqopen in external handler\(rq. This will
set \fIcontext_specific_text\fP to the URI under the mouse pointer.
.TP
\fBhid_button\fP
A mouse button has been pressed. \fBkey\fP will indicate the number of
the mouse button, plus modifiers.
.TP
\fBhid_key\fP
A key on a keyboard has been pressed. \fBkey\fP indicates which one and
which modifiers.
.TP
\fBhid_scroll\fP
Some scroll event (mouse wheel, touch pad, ...) has happened. \fBkey\fP
indicates the direction: \fBx\fP for negative x direction, \fBX\fP for
positive x direction, same thing with \fBy\fP and \fBY\fP. Modifiers can
be present as well. (Note: Currently, modifiers \fBmust\fP be pressed
for any \fBhid_scroll\fP events to be reported.)
.P
After all required variables have been transferred, \fBlariza\fP will
send a single line containing the word \fBexecute\fP.
.P
The input driver must now decide what to do and communicate back to the
browser. It does so by writing a line to its \fBstdout\fP. Note that
\fBlariza\fP will block until that line has been read. You can use the
following commands:
.TP
\fBabort_load\fP
Abort the current loading operation (only applies to WebKit viewports,
not to the download manager).
.TP
\fBclose\fP
Close the window which was the origin of this event.
.TP
\fBdownload_manager_close\fP
Close the download manager.
.TP
\fBdownload_manager_open\fP
Close the download manager.
.TP
\fBfocus_input_box\fP
Jump to input box and select all text.
.TP
\fBgo_backward\fP
Go backward in browsing history.
.TP
\fBgo_forward\fP
Go forward in browsing history.
.TP
\fBgo_uri\fP \fIURI\fP
Open the given URI in the window which was the origin of this event.
.TP
\fBgo_uri_new_tab\fP \fIURI\fP
Open the given URI in a new tab/window.
.TP
\fBreload_page\fP
Reload page in the window which was the origin of this event. Always
bypasses all caches.
.TP
\fBreload_user_certs\fP
Reload trusted user certificates. See section below.
.TP
\fBsearch_backward\fP
If a search has already been initiated, re-search backward.
.TP
\fBsearch_forward\fP
If a search has already been initiated, re-search forward.
.TP
\fBsearch_initiate\fP
Jump to input box and pre-populate it with $\fBLARIZA_SEARCH_PREFIX\fP,
thus allowing to easily initiate a new search.
.TP
\fBzoom_decrease\fP
Decrease zoom level in the window which was the origin of this event.
.TP
\fBzoom_increase\fP
Increase zoom level in the window which was the origin of this event.
.TP
\fBzoom_reset\fP
Reset zoom level to $\fBLARIZA_ZOOM\fP.
.P
Special commands are:
.TP
\fBnop\fP
Use \fBnop\fP to indicate that your input driver has indeed handled the
event, but \fBlariza\fP shall perform no further action.
.TP
\fBunknown\fP
If your input driver does not know how to handle the event, it must
still print a response. Use \fBunknown\fP to indicate that the event
shall be propagated to WebKit and Gtk.
.P
\fBlariza\fP ignores the exit code of the input driver.
.\" --------------------------------------------------------------------
.SH "BUNDLED WEB EXTENSIONS"
On startup, WebKit checks \fI~/.local/share/lariza/web_extensions\fP for
any \fB.so\fP files. See
.UR http://\:blogs.igalia.com/\:carlosgc/\:2013/\:09/\:10/\:webkit2gtk-\:web-\:process-\:extensions/
this blog post
.UE
for further information on these extensions.
.P
\fBlariza\fP comes with the following extensions:
.TP
\fBwe_adblock.so\fP
Generic adblock. Reads patterns from the file
\fI~/.config/lariza/adblock.black\fP. Each line can contain a regular
expression. These expressions match case-insensitive and partially, i.e.
\fB.*foo.*\fP is the same as \fB.*FOO.*\fP and you can use anchors like
\fB^https?://...\fP. Please refer to
.UR https://\:developer.\:gnome.\:org/\:glib/\:stable/\:glib-\:regex-\:syntax.html
the GLib reference
.UE
for more details. Lines starting with \fB#\fP are ignored.
.P
Those bundled web extensions are automatically compiled when you run
\fBmake\fP. To use them, though, make sure to copy them to the directory
mentioned above.
.\" --------------------------------------------------------------------
.SH "DOWNLOAD MANAGER"
Open the download manager using the appropriate hotkey. A new window
listing your downloads will appear. Clicking on an item will remove it
from the list and \(em if needed \(em cancel the download.
.P
There's no file manager integration, nor does \fBlariza\fP delete,
overwrite or resume downloads. If a file already exists, it won't be
touched. Instead, the new file name will have a suffix such as \fB.1\fP,
\fB.2\fP, \fB.3\fP, and so on.
.\" --------------------------------------------------------------------
.SH "TRUSTED CERTIFICATES"
By default, \fBlariza\fP trusts whatever CAs are trusted by WebKit, i.e. by
your GnuTLS installation. If you wish to trust additional certificates,
such as self-signed certificates, the first thing you should do is try
to add the appropriate CAs to your system-wide store.
.P
If you wish to add simple exceptions, you can grab the certificate and
store it in the directory \fI~/.config/lariza/certs\fP. The filename
must be equal to the hostname:
.P
.\f(CW
.nf
\&$ echo | openssl s_client -connect foo.de:443 | openssl x509 >foo.de
.fi
\fP
.P
This tells \fBlariza\fP to trust the given certificate when connecting
to host \fBfoo.de\fP.
.P
You can reload these certificates at runtime by pressing the appropriate
hotkey. Note that removed certificates will be kept in memory until you
restart \fBlariza\fP.
.P
Note: This is NOT equal to certificate pinning. WebKit ignores
user-specified certificates if the server's certificate can be validated
by any system-wide CA.
.\" --------------------------------------------------------------------
.SH "USING LARIZA WITH TABBED"
By default, \fBlariza\fP automatically launches an instance of suckless'
\fBtabbed\fP(1).
.P
You can turn this feature off (see command line arguments) or you can
specify a command line argument to embed \fBlariza\fP into an arbitrary
container (XEMBED). Note that \fBlariza\fP will also automatically embed
new windows in the same container.
.P
When using the automatically launched \fBtabbed\fP(1) instance, you
can't use \fBtabbed\fP(1)'s \fBCtrl + Shift + Return\fP hotkey. This is
because \fBtabbed\fP(1) is launched with \fB\-d\fP, so it knows nothing
about \fBlariza\fP. However, \fBlariza\fP provides its own hotkey to
launch a new window which will be embedded in the same instance of
\fBtabbed\fP(1).
.\" --------------------------------------------------------------------
.SH "WEBKIT LOCAL STORAGE"
WebKit does create files in your $\fBXDG_*\fP directories, i.e.
\fI~/.local/share\fP or \fI~/.cache\fP. It's up to you what you want to
do with this junk. I remove it regularly when no WebKit browser is
running. Another option would be to change the $\fBXDG_*\fP variables.
.P
I have explicitly not turned off the local storage feature in WebKit
because I don't know if this breaks web applications.
.\" --------------------------------------------------------------------
.SH "SEE ALSO"
.BR lariza (1).
